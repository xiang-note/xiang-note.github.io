<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[記筆記，學所學]]></title>
  <link href="https://xnote.dev/atom.xml" rel="self"/>
  <link href="https://xnote.dev/"/>
  <updated>2019-04-05T18:59:40+08:00</updated>
  <id>https://xnote.dev/</id>
  <author>
    <name><![CDATA[]]></name>
  </author>
  <generator uri="https://xnote.dev/">xnote</generator>

  <entry>
    <title type="html"><![CDATA[Composer 依頼管理工具介紹]]></title>
    <link href="https://xnote.dev/composer-introduction.html"/>
    <updated>2019-04-05T16:16:10+08:00</updated>
    <id>https://xnote.dev/composer-introduction.html</id>
    <content type="html"><![CDATA[
<p><a href="https://getcomposer.org/">Composer</a> 是 <code>PHP</code> 的依頼套件管理工具，以自動化簡化原本需大量人工處理的工作。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">安裝</h2>

<p>依據文件操作即可</p>

<ul>
<li><a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></li>
<li><a href="https://getcomposer.org/doc/00-intro.md">https://getcomposer.org/doc/00-intro.md</a></li>
</ul>

<p>若有使用 <code>Homebrew</code> 也可以使用指令一行安裝</p>

<pre><code class="language-shell">brew install composer
</code></pre>

<h3 id="toc_1">進行驗證</h3>

<p>輸入以下指令，能看到下方畫面代表安裝成功</p>

<pre><code class="language-shell">composer
</code></pre>

<p><img src="media/15544521704801/15544558012589.jpg" alt=""/></p>

<h2 id="toc_2">更新</h2>

<p>需要更新時，只需要打指令即可</p>

<pre><code class="language-shell">composer self-update
</code></pre>

<p>若使用 <code>Homebrew</code> 則輸入</p>

<pre><code class="language-shell">brew upgrade composer
</code></pre>

<h2 id="toc_3">Packagist</h2>

<p><a href="https://packagist.org/">Packagist</a> 是 <code>PHP</code> 套件倉庫中心，也是 <code>Composer</code> 主要的套件資料來源。</p>

<p>當要尋找套件時可以先來這邊搜尋，避免重複造輪子，也可以將自己的套件發佈到此網站提供別人使用。</p>

<p>也可以透過指令搜尋套件</p>

<pre><code class="language-shell">composer search laravel
</code></pre>

<h2 id="toc_4">組成介紹</h2>

<p>在一個 <code>Composer</code> 專案下，是由下列三個東西所組成的。</p>

<h3 id="toc_5">composer.json</h3>

<p>是一個 <code>json</code> 格式的<strong>檔案</strong>，功能是 <code>Composer</code> 的設定檔，主要提供開發人員所察看維護。</p>

<p>內容包含<br/>
 - 專案說明<br/>
 - 依頼套件及版本號<br/>
 - 其它設置<br/>
 - 自訂 script 及 event hook</p>

<blockquote>
<p>此檔案會進版本控制。</p>
</blockquote>

<h3 id="toc_6">composer.lock</h3>

<p>看內容也會發現是 <code>json</code> 格式的<strong>檔案</strong>，此檔案是提供<strong>軟體程式</strong>使用的，會自動維護禁止人為修改。</p>

<p>用途是確切記錄安裝時詳細的版本號，可以確保多人協作或線上環境都使用同一份套件及程式碼。</p>

<blockquote>
<p>此檔案會進版本控制。</p>
</blockquote>

<h3 id="toc_7">verdor/</h3>

<p>此<strong>資料夾</strong>用於存放下載依頼套件及 <code>autoload</code> 相關檔案</p>

<blockquote>
<p>此資料夾<strong>不用</strong>進版本控制。</p>
</blockquote>

<h2 id="toc_8">常用指令介紹</h2>

<p>介紹實務上可能會用到的一些指令，為避免介紹失焦，各指令不會提及太深用法，會另開筆記專門講解。</p>

<p>想瞭解更多可以前往 <a href="https://getcomposer.org/doc/">Composer Document</a> 查看文件。</p>

<p>或是輸入指令</p>

<pre><code class="language-shell">composer help {command}
</code></pre>

<h3 id="toc_9">init [options]</h3>

<p>交互式協助建立 <code>composer.json</code> 檔案。</p>

<p>當然選擇手動建立 <code>composer.json</code> 也是可以的。</p>

<h3 id="toc_10">require [options] [--] [&lt;packages&gt;]...</h3>

<p>用於安裝依頼套件，同時也會把依頼寫入 <code>composer.json</code> 檔案。</p>

<p>標準使用方式</p>

<pre><code class="language-shell">composer require monolog/monolog
</code></pre>

<blockquote>
<p>套件名稱後面可帶上版本號，若空會安裝最新版。</p>
</blockquote>

<p>標示為開發環境依頼套件 <code>--dev</code>。</p>

<pre><code class="language-shell">composer require --dev fzaninotto/faker
</code></pre>

<h3 id="toc_11">install [options] [--] [&lt;packages&gt;]...</h3>

<p>依據 <code>composer.lock</code> 安裝對應版本套件，通常用於第一次建立本地環境或線上環境。</p>

<blockquote>
<p>若本地無 <code>composer.lock</code> 檔，會同時建立一份。</p>
</blockquote>

<p>標準使用方式</p>

<pre><code class="language-shell">composer install
</code></pre>

<p>有時候會在 <code>composer.json</code> 標示環境要求，但是執行 <code>composer</code> 是透過 <code>docker</code> 安裝，只是要下載套件不滿足環境要求也無妨，這時就會使用</p>

<pre><code class="language-shell">composer install --ignore-platform-reqs
</code></pre>

<p>來略過環境檢查。</p>

<h3 id="toc_12">update [options] [--] [&lt;packages&gt;]...</h3>

<p>依據 <code>composer.json</code> 版本號條件，更新條件下最新版套件，會同時更新 <code>composer.lock</code> 檔案。</p>

<pre><code class="language-shell">composer update
</code></pre>

<h3 id="toc_13">dump-autoload [options]</h3>

<p>重新產生 <code>autoload</code> 檔案，由於 <code>Composer</code> 會快取依頼的檔案，當修改路徑或載入，最好執行一遍重新建立快取檔。</p>

<h3 id="toc_14">global &lt;command-name&gt; [&lt;args&gt;]...</h3>

<p>全域專案，通常用於安裝 <code>PHP</code> 所寫的指令</p>

<p>預設放在 <code>~/.composer/</code> 底下</p>

<pre><code class="language-shell">composer global require laravel/installer
</code></pre>

<h2 id="toc_15">結論</h2>

<ul>
<li><code>Composer</code> 對於 <code>PHP</code> 專案規模化提升提供了很大的幫助。</li>
<li><code>Composer</code> 是現在 <code>PHP</code> 依頼管理工具的主流。</li>
<li>大多場景下不用很深的理解就用得很好，在一開始可以不用投入太多學習資源在這邊，遇到一些特殊需求，再深入研究即可。</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[瞭解 PHP 現行趨勢]]></title>
    <link href="https://xnote.dev/php-trending.html"/>
    <updated>2019-04-04T13:53:13+08:00</updated>
    <id>https://xnote.dev/php-trending.html</id>
    <content type="html"><![CDATA[
<p><a href="https://laravel.com/">Laravel</a> 是一套 <strong>PHP Framework</strong>，理解 PHP 才可以完美駕馭。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">歷史背景</h2>

<p>PHP 發展至今已超過 20 個年頭（since 1995），網路上充滿過時的文章，容易學習到過時及不安全的寫法。</p>

<p>像是 <code>PHP 5.6</code> 及 <code>PHP 7.0</code> 在 2018 年 12 月時，官方已停止支援安全性更新。但許多整合式軟體及程式寫法仍停留在舊的版本沒有適時更新。</p>

<h2 id="toc_1">PHP The Right Way</h2>

<p>所幸的是，有一群熱心且經驗豐富的開發者寫了一份指南手冊，時至今日仍持續不斷的更新。</p>

<p>無論新手老手建議至少閱讀一遍。可以先不用理解每個怎麼使用或是描述什麼，但至少先有個概念。</p>

<p><a href="https://phptherightway.com/">PHP The Right Way</a></p>

<blockquote>
<p>裡面有多種翻譯版本，注意翻譯版本可能沒有即時的同步更新<br/>
建議參照原文閱讀或直接閱讀原文</p>
</blockquote>

<h2 id="toc_2">關注最新版本</h2>

<p>定期關注最新版本是很有幫助的，瞭解目前程式語言最新動向，並替未來做準備。</p>

<p><a href="https://www.php.net/supported-versions.php">Support version</a><br/>
<a href="https://www.php.net/releases/">PHP releases</a></p>

<p>經常關注新知有幾項好處</p>

<ol>
<li><strong>避免用到不合時的技術</strong>：以大部份程式語言來說，在淘汰某項功能之前，會先公告在下版被<strong>標為棄用</strong>，並在下下版<strong>移除功能</strong>，可及早改善寫法來減少技術債。</li>
<li><strong>學習新的解決方案</strong>：每個新功能推出時，都是為了解決過去的痛點，可以瞭解到痛點原因及為何採用這個解決方案，提升自我視野。</li>
<li><strong>安排更新計劃</strong>：一個活躍的組織，會不斷的疊代軟體版本，隨著不斷更新勢必會汰換舊版並停止安全性更新，及早安排更新計劃可免於漏洞導致的安全危機。</li>
</ol>

<blockquote>
<p>關注最新版本並非一昧的將環境提升至最新版本，每次變更都是一次風險，需綜合評估來安排更新計劃</p>
</blockquote>

<h2 id="toc_3">過去版本演進</h2>

<p>除了關注未來，瞭解歷史同等重要。觀察過去也可以得到相當多的訊息。</p>

<ul>
<li><a href="https://www.php.net/releases/7_3_0.php">PHP 7.3 release</a></li>
<li><a href="https://www.php.net/releases/7_2_0.php">PHP 7.2 release</a></li>
<li><a href="https://www.php.net/releases/7_1_0.php">PHP 7.1 release</a></li>
<li><a href="https://www.php.net/releases/7_0_0.php">PHP 7.0 release</a></li>
</ul>

<h2 id="toc_4">關注 PHP-FIG 規範</h2>

<p>早期組識散亂，缺乏規範導致大家不斷重複造輪子，以及整合不易，因此有了 <a href="https://www.php-fig.org/">PHP-FIG</a> 組織的誕生。</p>

<p>比較重要的規範如下</p>

<ul>
<li><a href="https://www.php-fig.org/psr/psr-1/">PSR-1: Basic Coding Standard</a></li>
<li><a href="https://www.php-fig.org/psr/psr-2/">PSR-2: Coding Style Guide</a></li>
<li><a href="https://www.php-fig.org/psr/psr-4/">PSR-4: Autoloader</a></li>
</ul>

<blockquote>
<p><code>PSR-0</code> 已棄用，有興趣的人可以搜尋一下背景故事</p>
</blockquote>

<h2 id="toc_5">關注熱門 Package</h2>

<p>透過研究 <code>open source</code> 可以學習別人思想及構架，自我學習成長。</p>

<p><a href="https://packagist.org/explore/popular">Packagist</a><br/>
<a href="https://github.com/trending/php">GitHub trending</a></p>

<h2 id="toc_6">結論</h2>

<ul>
<li>科技日新月異，不斷的學習對於工程師來說是很重要的事。</li>
<li><code>PHP</code> 環境和早期開發模式大相逕庭，提供越來越多適合規模化的設計</li>
<li>如果以前有開發過 <code>PHP</code>，請用新的角度看待 <code>PHP</code> 才不會被思想限制</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Laravel 教學資源目錄]]></title>
    <link href="https://xnote.dev/laravel-index.html"/>
    <updated>2019-04-04T11:07:50+08:00</updated>
    <id>https://xnote.dev/laravel-index.html</id>
    <content type="html"><![CDATA[
<p>自 <strong>2013</strong> 年末接觸 <a href="https://laravel.com/">Laravel</a> 開始，就被優雅的寫法及架構設計所吸引，至今從零到有開發過許多專案，學習並一同成長至今，也很高興看見了 <a href="https://www.facebook.com/groups/laravel.tw/">Laravel 臺灣</a> 在臺灣技術圈的蓬勃發展。</p>

<p>這些年來累積不少的經驗，希望透過筆記整理下來，讓對 <a href="https://laravel.com/docs/master">Laravel</a> 有興趣的人有更多的瞭解。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">導讀</h2>

<p>其實官方文件 <a href="https://laravel.com/docs/master">Laravel Document</a> 已經寫得相當詳細。<br/>
若對英文不熟悉的人，網路上也有許多中文翻譯及手把手教學的資源。</p>

<p>因此本系列筆記的重點會著重於</p>

<ul>
<li>自身的理解來描述概念</li>
<li>開發上常用技巧或語法</li>
<li>研究 source code 才知道的用法</li>
<li>踩過的雷，掉過的坑</li>
<li>不限於 <code>Laravel</code>，有關的也會提及</li>
<li>想到什麼寫什麼</li>
</ul>

<p>所以此系列不適合</p>

<ul>
<li>想快速上手實戰 <code>Laravel</code></li>
<li>系統性的學習</li>
</ul>

<h2 id="toc_1">PHP</h2>

<ul>
<li><a href="php-trending.html">瞭解 PHP 流行趨勢</a></li>
<li><a href="composer-introduction.html">Composer 依頼管理工具介紹</a></li>
</ul>

<h2 id="toc_2">Laravel</h2>

<h2 id="toc_3">Testing</h2>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[工作管理（jobs control）背景執行使用方法]]></title>
    <link href="https://xnote.dev/jobs-control.html"/>
    <updated>2019-04-03T21:03:14+08:00</updated>
    <id>https://xnote.dev/jobs-control.html</id>
    <content type="html"><![CDATA[
<p>有時候需要遠端 ssh 同時處理多項事情，如果可以把長時間運行的任務丟到背景處理，可以省下不少時間及麻煩。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">系列指令</h2>

<ul>
<li><code>[ctrl]-z</code></li>
<li><code>jobs</code></li>
<li><code>fg</code></li>
<li><code>bg</code></li>
<li><code>kill</code></li>
</ul>

<h2 id="toc_1">[ctrl]-z 將前台任務暫停丟到後台</h2>

<p>假設今天執行一個長時間的任務</p>

<pre><code class="language-shell">sh longtime.sh
</code></pre>

<p>按下 <code>[ctrl]-z</code> 後，就會出現</p>

<pre><code class="language-text">&gt; [1]  + 34567 suspended  sh longtime.sh
</code></pre>

<p>代表任務被 <strong>暫停</strong> 在後台</p>

<h2 id="toc_2">jobs 查看目前所有任務</h2>

<p>可以透過輸入</p>

<pre><code class="language-shell">jobs
</code></pre>

<p>看到目前所有任務</p>

<pre><code class="language-shell">&gt; [1]  + suspended  sh longtime.sh
</code></pre>

<h2 id="toc_3">fg 取後台任務至前台</h2>

<p>可以輸入指定編號來取得任務</p>

<pre><code class="language-shell">fg %1
</code></pre>

<p>或是省略參數</p>

<pre><code class="language-shell">fg
</code></pre>

<p>來取得<strong>上次執行</strong>任務</p>

<h2 id="toc_4">bg 將後台任務繼續執行</h2>

<p>由於 <code>[ctrl]-z</code> 會把任務<strong>暫停</strong>，可以透過 <code>bg</code> 指令在背景執行</p>

<pre><code class="language-shell">bg %1
</code></pre>

<p>或是一樣省略參數，來執行上次任務</p>

<pre><code class="language-shell">bg
</code></pre>

<p>將會出現</p>

<pre><code class="language-shell">&gt; [1]  + 34567 continued  sh longtime.sh
# 執行結束後則會出現
&gt; [1]  + 34567 done       sh longtime.sh
</code></pre>

<h2 id="toc_5">kill 終止執行任務</h2>

<p>如果想終止任務除了 <code>fg</code> 回前台按 <code>[ctrl]-c</code> 外，可以透過輸入</p>

<pre><code class="language-shell">kill %1
</code></pre>

<p>來終止任務</p>

<pre><code class="language-shell">&gt; [1]    34567 terminated  sh longtime.sh
</code></pre>

<p>也可以一次刪除多個任務</p>

<pre><code class="language-shell">kill %1 %2 %3
</code></pre>

<blockquote>
<p>務必注意編號為 <code>%n</code> 格式，否則 <code>kill</code> 指令會刪除到 <code>PID</code> 的 process</p>
</blockquote>

<h2 id="toc_6">同場加映</h2>

<h3 id="toc_7">「+」「-」符號意義</h3>

<p>當執行多個任務時，會發現最前面除了數字不同，還存在不同符號</p>

<pre><code class="language-shell">jobs
&gt; [1]    suspended  sh longtime.sh
&gt; [2]    suspended  sh longtime.sh
&gt; [3]    suspended  sh longtime.sh
&gt; [4]  - suspended  sh longtime.sh
&gt; [5]  + suspended  sh longtime.sh
</code></pre>

<p><code>+</code> 代表上次執行的任務<br/>
<code>-</code> 代表上上次執行的任務</p>

<h3 id="toc_8">「&amp;」快速背景執行</h3>

<p>依上面方法，想要一個任務背景執行必需先 <code>[ctrl]-z</code> 再 <code>bg</code><br/>
其實可以在指令最後加上 <code>&amp;</code> 來達到一樣的目的</p>

<pre><code class="language-shell">sh longtime.sh &amp;
&gt; [3] 34567

jobs
&gt; [1]  - suspended  sh longtime.sh
&gt; [2]  + suspended  sh longtime.sh
&gt; [3]    running    sh longtime.sh 
</code></pre>

<p>可以發現任務直接運行在背景</p>

<h2 id="toc_9">結論</h2>

<ul>
<li>除了長時間運行任務外，拿來多工處理也是很方便，例如 <code>vim</code> 一半暫停出來看參數</li>
<li>現在 <code>terminal</code> 視窗都支援多開，有時候多連幾個 <code>ssh</code> 也是簡單快速的辦法</li>
<li>背景執行還是會 <code>stdout</code> 及 <code>stderr</code> 在畫面上干擾操作，可以 <code>&gt;/dev/null 2&gt;&amp;1</code> 來丟棄訊息，或是 <code>&gt; log.txt</code> 寫入檔案方便檢查</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[同台電腦使用多組 GitHub 帳號]]></title>
    <link href="https://xnote.dev/multiple-ssh.html"/>
    <updated>2019-04-02T15:12:56+08:00</updated>
    <id>https://xnote.dev/multiple-ssh.html</id>
    <content type="html"><![CDATA[
<p>由於申請一組 <code>GitHub</code> 帳號來放置筆記，但原先就有一組帳號正常在使用，造成新申請的沒辦法正常 <code>push</code> 。</p>

<h2 id="toc_0">解法</h2>

<p>搜尋了許多文章找到解法方法，大致原理是透過不同的 <strong>Hostname</strong> 來決定使用不同的 <strong>SSH key</strong> 進行溝通。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_1">產生新的 SSH key</h2>

<pre><code class="language-shell">cd ~/.ssh

# ~/.ssh
ssh-keygen -t rsa -C &quot;your@email.com&quot; &quot;id_rsa_new&quot;
</code></pre>

<p>將會產生 <code>id_rsa_new</code> 及 <code>id_rsa_new.pub</code> 兩個檔案</p>

<h2 id="toc_2">把 SSH key 加至 GitHub</h2>

<p><img src="media/15541891768250/15541902962055.jpg" alt=""/></p>

<ol>
<li>點擊帳號頭像展開列表</li>
<li>點選 <code>Settings</code></li>
<li>點選 <code>SSH and GPG keys</code></li>
<li>點擊 <code>New SSH key</code></li>
</ol>

<h3 id="toc_3">複製公鑰</h3>

<p>複製 <code>~/.ssh/id_rsa_new.pub</code> 檔案內容</p>

<p>若 macOS 用戶可直接透過 terminal 進行複製</p>

<pre><code class="language-shell">pbcopy &lt; ~/.ssh/id_rsa_new.pub
</code></pre>

<h3 id="toc_4">新增 SSH key</h3>

<p><img src="media/15541891768250/15541904795020.jpg" alt=""/></p>

<ol>
<li><code>Title</code> 打上一個提供辨識的名稱即可</li>
<li><code>Key</code> 貼上剛剛新增的 <code>id_rsa_new.pub</code> 內容</li>
</ol>

<h2 id="toc_5">設定 git config</h2>

<h3 id="toc_6">開啟檔案編輯</h3>

<pre><code class="language-shell">vim ~/.ssh/config
</code></pre>

<h3 id="toc_7">填入設定內容</h3>

<pre><code class="language-text">Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa

Host github-new
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa_new
</code></pre>

<h3 id="toc_8">進行驗證</h3>

<pre><code class="language-shell">ssh -T github-new

&gt; Hi xiang-note! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<h2 id="toc_9">設定 Repository 不同身份</h2>

<p>可依據需求來指定不同 Repository 的身份</p>

<p>在 <code>project/.git/config</code> 檔案中加入</p>

<pre><code class="language-ini">[user]
    name = username
    email = your@email.com
</code></pre>

<p>或是透過指令</p>

<pre><code class="language-shell">git config user.name &quot;username&quot;
git config user.email &quot;your@email.com&quot;
</code></pre>

<h2 id="toc_10">設定網址</h2>

<h3 id="toc_11">重新 <code>git clone</code></h3>

<pre><code class="language-shell">git clone git@github-new:xiang-note/xiang-note.github.io.git
</code></pre>

<h3 id="toc_12">修改現有 Repository</h3>

<pre><code class="language-shell">git remote set-url origin git@github-new:xiang-note/xiang-note.github.io.git
</code></pre>

<h2 id="toc_13">結論</h2>

<ul>
<li>此方法不限於使用在 <code>GitHub</code></li>
<li>此技巧也不限於用在 <code>Git</code></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[在 Github Pages 使用自訂 Domain]]></title>
    <link href="https://xnote.dev/custom-domain.html"/>
    <updated>2019-04-01T16:39:25+08:00</updated>
    <id>https://xnote.dev/custom-domain.html</id>
    <content type="html"><![CDATA[
<p>考量到未來維護及延續性，決定買了一個新網域 <code>xnote.dev</code> 來替換掉醜醜的 <code>xiang-note.github.io</code>。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">事前準備</h2>

<p>先準備一個網域名稱</p>

<p>可以從 <a href="https://tw.godaddy.com/">GoDaddy</a>、<a href="https://www.namecheap.com/">NameCheap</a>、<a href="https://domains.google/">Google Domains</a>、<a href="https://www.gandi.net/">Gandi</a> 等等域名服務商購買。</p>

<p>以前用過大大小小的域名服務商，這次想嘗試不同介面體驗看看。<br/>
原本想要從 <code>Google Domains</code> 購買，但是目前臺灣不在開放名單中，又不想亂填地址只好選擇其它方案。</p>

<h2 id="toc_1">設定 CNAME</h2>

<p>設定 <code>CNAME</code> 有兩種方式</p>

<h3 id="toc_2">第一種</h3>

<p>在 Repository 裡增加一個名為 <code>CNAME</code> 檔案，並在裡面打上想對應的網域名稱</p>

<pre><code class="language-shell">cd xiang-note.github.io

# ~/xiang-note.github.io
echo &quot;xnote.dev&quot; &gt; CNAME
</code></pre>

<h3 id="toc_3">第二種</h3>

<p>在 <code>Github</code> Repository 中</p>

<p><img src="media/15541079657146/15541243205018.jpg" alt=""/></p>

<ol>
<li>點擊 <code>Settings</code> 頁面</li>
</ol>

<p><img src="media/15541079657146/15541245081738.jpg" alt=""/></p>

<ol>
<li>在 <code>Custom domain</code> 打上對應的網域名稱</li>
</ol>

<h2 id="toc_4">設定 DNS 對應到 GitHub Pages</h2>

<p>可以依據這篇的說明進行設定 <a href="https://help.github.com/en/articles/using-a-custom-domain-with-github-pages">Using a custom domain with GitHub Pages</a></p>

<p>由於我這次是使用 <code>apex domain</code>，可以透過 <code>ALIAS</code>、<code>ANAME</code>、<code>A</code> 來設定，就看 <code>DNS 服務商</code> 有提供哪些來決定使用哪個。</p>

<h3 id="toc_5">新增 Record</h3>

<p>最推薦是使用 <code>ALIAS</code>，剛好這次使用的 <code>DNS 服務商</code> 有提供</p>

<p><img src="media/15541079657146/15541251133119.jpg" alt=""/></p>

<blockquote>
<p>此動作可能要等候一段時間讓 <code>DNS</code> 同步才會生效</p>
</blockquote>

<h3 id="toc_6">進行驗證</h3>

<p>透過 <code>dig</code> 指令來檢查</p>

<pre><code class="language-shell">dig +noall +answer xnote.dev

&gt; xnote.dev.        2118    IN  A   185.199.108.153
&gt; xnote.dev.        2118    IN  A   185.199.111.153
&gt; xnote.dev.        2118    IN  A   185.199.109.153
&gt; xnote.dev.        2118    IN  A   185.199.110.153
</code></pre>

<p>如上述顯示即代表設定成功</p>

<blockquote>
<p>對應 IP <code>185.199.xxx.153</code> 可能會調整，實際以 <code>GitHub Pages</code> 文件為主</p>
</blockquote>

<h2 id="toc_7">設定 HTTPS</h2>

<p>使用 <code>GitHub Pages</code> 設定 <code>HTTPS</code> 非常簡單，只要打開設定就完成了。</p>

<h3 id="toc_8">進行設定</h3>

<p>在 <code>GitHub</code> Repository 的 <code>Settings</code> 頁</p>

<p><img src="media/15541079657146/15541256529603.jpg" alt=""/></p>

<ol>
<li>打開 Enforce HTTPS</li>
</ol>

<h3 id="toc_9">進行驗證</h3>

<p>使用瀏覽器打開 <code>https://xnote.dev</code> 查看憑證是否設定成功</p>

<p><img src="media/15541079657146/15541266338132.jpg" alt=""/></p>

<ol>
<li>點擊鎖型符號</li>
<li>點擊憑證</li>
</ol>

<p><img src="media/15541079657146/15541260567468.jpg" alt=""/></p>

<p>憑證設定成功</p>

<h2 id="toc_10">結論</h2>

<ul>
<li><code>GitHub Pages</code> 整合的非常好，只要網頁點點設定就可以處理好一堆原本複雜的事情。</li>
<li>設定 <code>DNS</code> 時，使用 <code>dig</code> 指令很快就抓取到設定，但是 <code>GitHub</code>花了點時間等才抓到，需要等待一下</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[利用 GitHub Pages 建立免費靜態網站]]></title>
    <link href="https://xnote.dev/github-pages.html"/>
    <updated>2019-03-31T12:25:07+08:00</updated>
    <id>https://xnote.dev/github-pages.html</id>
    <content type="html"><![CDATA[
<p>一直以來想用 <a href="https://pages.github.com">GitHub Pages</a> 建立個筆記網站，這次就順手做個歷程記錄。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">事前準備</h2>

<p>需要先有一個 <a href="https://github.com">GitHub</a> 帳號，沒有的可以先去 <a href="https://github.com/join">註冊</a> 一個。</p>

<h2 id="toc_1">建立一個 Repository</h2>

<p><img src="media/15540063071124/15540242718149.jpg" alt=""/></p>

<ol>
<li>建立新 Repository</li>
<li>輸入 Repository 名稱 <code>{username}.github.io</code></li>
<li>直接創建即可</li>
</ol>

<blockquote>
<p><code>{username}</code> 為你的 <a href="https://github.com">GitHub</a> 帳號名稱</p>
</blockquote>

<h2 id="toc_2">建立內容</h2>

<p>以下使用 <code>xiang-note</code> 當作帳號示範</p>

<h3 id="toc_3">Clone Repository</h3>

<pre><code class="language-shell">git clone https://github.com/xiang-note/xiang-note.github.io.git
</code></pre>

<h3 id="toc_4">加入內容</h3>

<pre><code class="language-shell">cd xiang-note.github.io

# ~/xiang-note.github.io
echo &quot;Hello GitHub Pages&quot; &gt; index.html
</code></pre>

<h3 id="toc_5">Push</h3>

<pre><code class="language-shell">git add .
git commit -m &quot;First commit&quot;
git push
</code></pre>

<h2 id="toc_6">頁面測試</h2>

<p>最後打開網頁 <code>https://xiang-note.github.io</code></p>

<p><img src="media/15540063071124/15540304432095.jpg" alt=""/></p>

<p>看到這個畫面代表成功。</p>

<h2 id="toc_7">結論</h2>

<p>整體操作上來說相當簡單，只要建立好對應名稱的 Repository 後，<a href="https://pages.github.com">GitHub Pages</a> 就會自動把網址對應到 Repository 了。</p>

]]></content>
  </entry>

</feed>
